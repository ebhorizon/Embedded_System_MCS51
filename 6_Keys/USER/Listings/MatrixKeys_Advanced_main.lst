<<<<<<< HEAD
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MATRIXKEYS_ADVANCED_MAIN
OBJECT MODULE PLACED IN ..\OBJ\MatrixKeys_Advanced_main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE MatrixKeys_Advanced_main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HARDWARE) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\MatrixKeys_Advanced_main.lst) OBJECT(..\OBJ\MatrixKeys_Advanced_main.obj)

line level    source

   1          // 实现一个简单的整数计算器
   2          /* 7    8       9       +
   3             4    5       6       -
   4             1    2       3       *
   5             clr  0       =       / */
   6          
   7          #include <reg52.h>
   8          #include "matrix_key.h"
   9          #include "74xx138.h"
  10          
  11          // 定义常用的数据类型
  12          typedef unsigned char u8;       // 0 ~ 255
  13          typedef unsigned int  u16;      // 0 ~ 65535
  14          
  15          // 数码管段选接口
  16          #define LED_SEG P0
  17          // 共阴数码管的段选，0 ~ 9
  18          u8 code SegSel_CC[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  19          // 显示的8位数据
  20          u8 DisplayCode[8]     = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F};
  21          
  22          void Delay1ms()                         //误差 0us
  23          {
  24   1          u8 a, b, c;
  25   1          for(c = 1; c > 0; c--)
  26   1              for(b = 2; b > 0; b--)
  27   1                  for(a = 242; a > 0; a--);
  28   1      }
  29          
  30          // 数码管显示
  31          void SegDisScan()
  32          {
  33   1              u8 i;
  34   1              
  35   1          for(i = 0; i < 8; i++)
  36   1              {
  37   2                      // 位选信号，控制哪一位数码管点亮，使用3-8译码器
  38   2                      _74XX138_SetLow(i);
  39   2                      // 段选信号，控制数码管亮什么
  40   2                      LED_SEG = DisplayCode[i];
  41   2                      Delay1ms();
  42   2                      LED_SEG = 0x00;         //数码管消隐
  43   2              }
  44   1      }
  45          
  46          void DisplayCode_Update(long result)
  47          {
  48   1              u8 i, k = 0;
  49   1              
  50   1              for(i = 0; i < 8; i++) DisplayCode[i] = 0x00;
  51   1                      
  52   1              // 结果为0
  53   1              if(result == 0)
  54   1              {
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 2   

  55   2                      DisplayCode[7] = 0x3F;
  56   2              }
  57   1              // 结果大于0
  58   1              else if(result > 0)
  59   1              {
  60   2                      while(result > 0)
  61   2                      {
  62   3                              DisplayCode[7 - k] = SegSel_CC[result % 10];
  63   3                              result /= 10;
  64   3                              k++;
  65   3                      }
  66   2              }
  67   1              // 结果小于0
  68   1              else
  69   1              {
  70   2                      // 显示绝对值
  71   2                      result = -result;
  72   2                      while(result > 0)
  73   2                      {
  74   3                              DisplayCode[7 - k] = SegSel_CC[result % 10];
  75   3                              result /= 10;
  76   3                              k++;
  77   3                      }
  78   2                      // 显示负号
  79   2                      DisplayCode[7 - k] = 0x40;
  80   2              }
  81   1      }
  82          
  83          void MatrixKeyAction(u8 keyVal)
  84          {
  85   1              static long result = 0; // 装结果
  86   1              static long temp   = 0; // 装中间操作数
  87   1              static u8 operation;    // 操作符
  88   1              
  89   1              switch(keyVal)
  90   1              {
  91   2                      // 数字1 ~ 9
  92   2                      case 1:  case 2:  case 3:
  93   2                      case 5:  case 6:  case 7:
  94   2                      case 9:  case 10: case 11:
  95   2                      {
  96   3                              /* 键码：1      2       3
  97   3                                 数字：7      8       9 */
  98   3                              if(keyVal < 5)          result = result * 10 + keyVal + 6;
  99   3                              /* 键码：9      10      11
 100   3                                 数字：1      2       3 */
 101   3                              else if(keyVal > 7)     result = result * 10 + keyVal - 8;
 102   3                              /* 键码：5      6       7
 103   3                                 数字：4      5       6 */
 104   3                              else                            result = result * 10 + keyVal - 1;
 105   3                              
 106   3                              DisplayCode_Update(result);
 107   3                      }
 108   2                      break;
 109   2                      // 数字0
 110   2                      case 14: 
 111   2                      {
 112   3                              result *= 10;
 113   3                              DisplayCode_Update(result);
 114   3                      }
 115   2                      break;
 116   2                      // 清零
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 3   

 117   2                      case 13:
 118   2                      {
 119   3                              result = 0;
 120   3                              temp   = 0;
 121   3                              DisplayCode_Update(result);
 122   3                      }
 123   2                      break;
 124   2                      // 操作符+-*/
 125   2                      case 4: /* + */ case 8: /* - */ case 12: /* * */ case 16: /* / */
 126   2                      {
 127   3                              operation = keyVal;
 128   3                              temp      = result;
 129   3                              // 准备装下一个操作数
 130   3                              result    = 0;
 131   3                      }
 132   2                      break;
 133   2                      // 等号计算显示结果
 134   2                      case 15:
 135   2                      {
 136   3                              switch(operation)
 137   3                              {
 138   4                                      case 4:  temp += result; break;
 139   4                                      case 8:  temp -= result; break;
 140   4                                      case 12: temp *= result; break;
 141   4                                      case 16: temp /= result; break;
 142   4                                      default: break;
 143   4                              }
 144   3                              result = temp;
 145   3                              DisplayCode_Update(result);
 146   3                      }
 147   2                      break;
 148   2                      default: break;
 149   2              }
 150   1      }
 151          
 152          void main()
 153          {
 154   1              u8 keyVal;
 155   1              
 156   1              // 这种写法挺闪的~
 157   1              MatrixKeyInit();
 158   1              while(1)
 159   1              {
 160   2                      SegDisScan();
 161   2                      keyVal = MatrixKeyScan();
 162   2                      MatrixKeyAction(keyVal);
 163   2              }
 164   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    799    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
=======
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MATRIXKEYS_ADVANCED_MAIN
OBJECT MODULE PLACED IN ..\OBJ\MatrixKeys_Advanced_main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE MatrixKeys_Advanced_main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HARDWARE) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\MatrixKeys_Advanced_main.lst) OBJECT(..\OBJ\MatrixKeys_Advanced_main.obj)

line level    source

   1          // 实现一个简单的整数计算器
   2          /* 7    8       9       +
   3             4    5       6       -
   4             1    2       3       *
   5             clr  0       =       / */
   6          
   7          #include <reg52.h>
   8          #include "matrix_key.h"
   9          #include "74xx138.h"
  10          
  11          // 定义常用的数据类型
  12          typedef unsigned char u8;       // 0 ~ 255
  13          typedef unsigned int  u16;      // 0 ~ 65535
  14          
  15          // 数码管段选接口
  16          #define LED_SEG P0
  17          // 共阴数码管的段选，0 ~ 9
  18          u8 code SegSel_CC[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  19          // 显示的8位数据
  20          u8 DisplayCode[8]     = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F};
  21          
  22          void Delay1ms()                         //误差 0us
  23          {
  24   1          u8 a, b, c;
  25   1          for(c = 1; c > 0; c--)
  26   1              for(b = 2; b > 0; b--)
  27   1                  for(a = 242; a > 0; a--);
  28   1      }
  29          
  30          // 数码管显示
  31          void SegDisScan()
  32          {
  33   1              u8 i;
  34   1              
  35   1          for(i = 0; i < 8; i++)
  36   1              {
  37   2                      // 位选信号，控制哪一位数码管点亮，使用3-8译码器
  38   2                      _74XX138_SetLow(i);
  39   2                      // 段选信号，控制数码管亮什么
  40   2                      LED_SEG = DisplayCode[i];
  41   2                      Delay1ms();
  42   2                      LED_SEG = 0x00;         //数码管消隐
  43   2              }
  44   1      }
  45          
  46          void DisplayCode_Update(long result)
  47          {
  48   1              u8 i, k = 0;
  49   1              
  50   1              for(i = 0; i < 8; i++) DisplayCode[i] = 0x00;
  51   1                      
  52   1              // 结果为0
  53   1              if(result == 0)
  54   1              {
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 2   

  55   2                      DisplayCode[7] = 0x3F;
  56   2              }
  57   1              // 结果大于0
  58   1              else if(result > 0)
  59   1              {
  60   2                      while(result > 0)
  61   2                      {
  62   3                              DisplayCode[7 - k] = SegSel_CC[result % 10];
  63   3                              result /= 10;
  64   3                              k++;
  65   3                      }
  66   2              }
  67   1              // 结果小于0
  68   1              else
  69   1              {
  70   2                      // 显示绝对值
  71   2                      result = -result;
  72   2                      while(result > 0)
  73   2                      {
  74   3                              DisplayCode[7 - k] = SegSel_CC[result % 10];
  75   3                              result /= 10;
  76   3                              k++;
  77   3                      }
  78   2                      // 显示负号
  79   2                      DisplayCode[7 - k] = 0x40;
  80   2              }
  81   1      }
  82          
  83          void MatrixKeyAction(u8 keyVal)
  84          {
  85   1              static long result = 0; // 装结果
  86   1              static long temp   = 0; // 装中间操作数
  87   1              static u8 operation;    // 操作符
  88   1              
  89   1              switch(keyVal)
  90   1              {
  91   2                      // 数字1 ~ 9
  92   2                      case 1:  case 2:  case 3:
  93   2                      case 5:  case 6:  case 7:
  94   2                      case 9:  case 10: case 11:
  95   2                      {
  96   3                              /* 键码：1      2       3
  97   3                                 数字：7      8       9 */
  98   3                              if(keyVal < 5)          result = result * 10 + keyVal + 6;
  99   3                              /* 键码：9      10      11
 100   3                                 数字：1      2       3 */
 101   3                              else if(keyVal > 7)     result = result * 10 + keyVal - 8;
 102   3                              /* 键码：5      6       7
 103   3                                 数字：4      5       6 */
 104   3                              else                            result = result * 10 + keyVal - 1;
 105   3                              
 106   3                              DisplayCode_Update(result);
 107   3                      }
 108   2                      break;
 109   2                      // 数字0
 110   2                      case 14: 
 111   2                      {
 112   3                              result *= 10;
 113   3                              DisplayCode_Update(result);
 114   3                      }
 115   2                      break;
 116   2                      // 清零
C51 COMPILER V9.57.0.0   MATRIXKEYS_ADVANCED_MAIN                                          06/02/2020 20:45:17 PAGE 3   

 117   2                      case 13:
 118   2                      {
 119   3                              result = 0;
 120   3                              temp   = 0;
 121   3                              DisplayCode_Update(result);
 122   3                      }
 123   2                      break;
 124   2                      // 操作符+-*/
 125   2                      case 4: /* + */ case 8: /* - */ case 12: /* * */ case 16: /* / */
 126   2                      {
 127   3                              operation = keyVal;
 128   3                              temp      = result;
 129   3                              // 准备装下一个操作数
 130   3                              result    = 0;
 131   3                      }
 132   2                      break;
 133   2                      // 等号计算显示结果
 134   2                      case 15:
 135   2                      {
 136   3                              switch(operation)
 137   3                              {
 138   4                                      case 4:  temp += result; break;
 139   4                                      case 8:  temp -= result; break;
 140   4                                      case 12: temp *= result; break;
 141   4                                      case 16: temp /= result; break;
 142   4                                      default: break;
 143   4                              }
 144   3                              result = temp;
 145   3                              DisplayCode_Update(result);
 146   3                      }
 147   2                      break;
 148   2                      default: break;
 149   2              }
 150   1      }
 151          
 152          void main()
 153          {
 154   1              u8 keyVal;
 155   1              
 156   1              // 这种写法挺闪的~
 157   1              MatrixKeyInit();
 158   1              while(1)
 159   1              {
 160   2                      SegDisScan();
 161   2                      keyVal = MatrixKeyScan();
 162   2                      MatrixKeyAction(keyVal);
 163   2              }
 164   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    799    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
>>>>>>> 64c192fc79434a4be878e64dcbbf3fda3a7e4b5e
